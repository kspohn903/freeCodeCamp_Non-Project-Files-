let called = 0;
let hash = (string) => {
  called++;
  let hash = 0;
  for (let i = 0; i < string.length; i++) { 
    hash += string.charCodeAt(i); 
  } 
  return hash; 
};

let HashTable = function() {
  this.collection = {}; /* change code below this line */
  this.add = function(key, val) {
    let theHash = hash(key);
    if (!this.collection.hasOwnProperty(theHash)) {
      this.collection[theHash] = {};
    } 
    this.collection[theHash][key] = val; 
  };
  this.remove = (key) => {
    let hashedObj = this.collection[hash(key)];
    if (hashedObj.hasOwnProperty(key)) { 
        delete hashedObj[key]; 
    }
    if (!Object.keys(hashedObj).length) {
      delete this.collection[hash(key)];
    } 
   };   
   this.lookup = (key) => {
    let theHash = hash(key);
    return (this.collection.hasOwnProperty(theHash)) ? 
            this.collection [theHash][key]: null;
    }; /*change code above this line*/
};