function cyclicalFigurateNums(n) {
  let getChains = (chain,n,numTypes,numsExcludingLastNeededType) => {
    if (chain.length == n) { return [chain]; }
    const nextNums = getNextNumbersInChain(
      chain[chain.length-1], numsExcludingLastNeededType);
    const chains = [];
    for (let j = 0; j < nextNums.length; j++) {
      const nextNum = nextNums[j];
      if (chain.indexOf(nextNum) == -1) {
        const nextChain = [...chain, nextNum];
        chains.push(...getChains(nextChain, n, numTypes,
        numsExcludingLastNeededType) );
    } }  return chains; };

  let getNextNumbersInChain = (num, numsExcludingLastNeededType) => {
    const res = [], beginning = num % 100;
    numsExcludingLastNeededType.forEach(n => {
      if (Math.floor(n/100) == beginning) { res.push(n); }
    });  return res; };

function fillNumberTypes(n, numTypes, numsExcludingLastNeededType){
    const [, lastTypeCheck, lastTypeArr] = numTypes[n - 1];
    for (let i = 1000; i <= 9999; i++) {
      for (let j = 0; j < n-1; j++) {
        const [, typeCheck, typeArr] = numTypes[j];
        if (typeCheck(i)) {
          typeArr.push(i);
          numsExcludingLastNeededType.add(i);
      } }
      if (lastTypeCheck(i)) { lastTypeArr.push(i); }
  } }
  let isCyclicalChain = (chain,n,numTypes) => {
  const numTypesInChain = getNumberTypesInChain(chain, numTypes);
    if (!isChainAllowed(numTypesInChain, n)) { return false; }
    const isChainCyclic = 
          Math.floor(chain[0]/100) == chain[chain.length-1] % 100;
    return isChainCyclic;
  };
  let getNumberTypesInChain = (chain,numTypes) => {
    const numbersInChain = {};
    for (let i = 0; i < numTypes.length; i++) {
      const numTypeName = numTypes[i][0];
      numbersInChain[numTypeName] = [];
      } 
      for (let i = 0; i < chain.length; i++) {
      for (let j = 0; j < n; j++) {
        const [typeName, , typeNumbers] = numTypes[j];
        const typeNumbersInChain = numbersInChain[typeName];
        if (typeNumbers.indexOf(chain[i]) != -1) {
          typeNumbersInChain.push(chain[i]);
        } } } return numbersInChain; };

  let isChainAllowed = (numTypesInChain, n) => {
    for (let i = 0; i < n; i++) {
    const typeName = numberTypes[i][0];
  const isNumberWithTypeInChain = numTypesInChain[typeName].length > 0;
      if (!isNumberWithTypeInChain) { return false; }
      for (let j = i + 1; j < n; j++) {
        const otherTypeName = numberTypes[j][0];
        if (isNumberRepeatedAsOnlyNumberInTwoTypes(
    numTypesInChain[typeName], numTypesInChain[otherTypeName])){        return false;  } } } return true; };

  let isNumberRepeatedAsOnlyNumberInTwoTypes = (typeNumbers,
    otherTypeNumbers) => (typeNumbers.length == 1 && 
    otherTypeNumbers.length == 1 && 
    typeNumbers[0] == otherTypeNumbers[0]);
  
  let isTriangle = (n) => ((8*n + 1) ** 0.5 - 1) % 2 == 0,
      isSquare = (n) => n ** 0.5 == parseInt(n ** 0.5, 10);             let isPentagonal = (n) => ((24*n + 1) ** 0.5 + 1) % 6 == 0, 
    isHexagonal = (n) => ((8*n + 1) ** 0.5 + 1) % 4 == 0,
    isHeptagonal = (n) => ((40*n + 9) ** 0.5 + 3) % 10 == 0;
let isOctagonal = (n) => ((3*n + 1) ** 0.5 + 1) % 3 == 0;
const numberTypes = [['triangle', isTriangle, []],
['square', isSquare, []], ['pentagonal', isPentagonal, []],
['hexagonal', isHexagonal, []], ['heptagonal', isHeptagonal, []],
['octagonal', isOctagonal, []] ], 
    numsExcludingLastNeededType = new Set();
  fillNumberTypes(n, numberTypes, numsExcludingLastNeededType);
  const nNumberChains = [];
  const [, , lastType] = numberTypes[n - 1];
  for (let i = 0; i < lastType.length; i++) {
    const startOfChain = lastType[i];
    nNumberChains.push(...getChains([startOfChain], n, numberTypes, numsExcludingLastNeededType) );
  }
  const cyclicalChains = nNumberChains.filter(chain =>
        isCyclicalChain(chain, n, numberTypes) );
  let sum = 0;
  for (let i = 0; i < cyclicalChains.length; i++) {
    for (let j = 0; j < cyclicalChains[i].length; j++) {
      sum += cyclicalChains[i][j];
  } } return sum;
}
cyclicalFigurateNums(3);