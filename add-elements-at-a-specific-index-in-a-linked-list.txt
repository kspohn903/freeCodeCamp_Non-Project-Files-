function LinkedList() {
  let length = 0, head = null;
  let Node = (element) => {
    this.element = element;
    this.next = null;
  };
  this.size = () => length;
  this.head = () => head;
  this.add = function(element) {
    let node = new Node(element);
    if (head == null) { 
         head = node; 
    } else {
      let currentNode = head;
      while (currentNode.next) { 
          currentNode = currentNode.next; 
      }
      currentNode.next = node;
    } 
    length++; 
  }; /*end of this.add.*/
  
  /* Only change code below this line */
  this.addAt = (index, element) => {
    if (index < 0 || index >= length) { 
       return false; 
    }
    let node = head;
    if (index > 0) {
      let i = 0;
      while ( (i+1) != index) {
        node = node.next;
        i++;
      } 
    }
    const newNode = new Node(element);
    newNode.next = node.next;
    if (index == 0) { 
        head = newNode; 
    } else { 
        node.next = newNode; 
    }
    length++;
  };
  /* Only change code above this line */
}