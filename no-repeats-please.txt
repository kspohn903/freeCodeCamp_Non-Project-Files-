function permAlone(str) {
  /*Create a regex to match repeated consecutive characters.*/
  let regex = /(.)\1+/;
  let arr = str.split(""), permutations = []; 
  let tmp;
  /* Return 0 if str contains same character. */
  if (str.match(regex) != null && str.match(regex)[0] == str) { 
    return 0; 
  } /* Function to swap variables' content. */
  
  let swap = (i1, i2) => { 
      [arr[i1], arr[i2]] = [arr[i2], arr[i1]]; 
  };

  /*Generate arrays of permutations using the algorithm.*/
  let generate = (int) => {
    if (int == 1) { /* Make sure to join the characters as 
                       we create the permutation arrays*/
      permutations.push(arr.join(""));
    } else {
      for (let i = 0; i != int; ++i) {
        generate(int - 1);
        swap( ((int % 2) ? 0 : i), int - 1);
      } 
    } 
  };
  generate(arr.length); /* Filter the array of repeated permutations. */

  let filtered = permutations.filter((string) => !string.match(regex));
  return filtered.length; /* Return how many have no repetitions. */

};

permAlone("aab"); /*Test here.*/