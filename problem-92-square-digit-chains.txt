function squareDigitChains(limit) {
  // Based on https://www.xarg.org/puzzle/project-euler/problem-92/
  let getCombinations = (neededDigits,curDigits) => {
    if (neededDigits == curDigits.length) { return [curDigits]; }
    const combinations = [],
          lastDigit = curDigits.length !== 0 ? curDigits[0] : 9;
    for (let i = 0; i <= lastDigit; i++) {
    const results = getCombinations(neededDigits,[i].concat(curDigits));
      combinations.push(...results);
    } return combinations; };

  let getPossibleSums = (limit) => {
    const digitsCount = getDigits(limit).length - 1,
          possibleSquaredSums = [false];
    for (let i = 1; i <= 81 * digitsCount; i++) {
      let curVal = i;
      while (curVal != 1 && curVal != 89) {
        curVal = addSquaredDigits(curVal);
      }
      possibleSquaredSums[i] = curVal == 89;
    } return possibleSquaredSums; };

  let addSquaredDigits = (num) => {
    const digits = getDigits(num);
    let result = 0;
    for (let i = 0; i < digits.length; i++) { result += digits[i] ** 2;}
    return result;
  };

  let getDigits = (number) => {
    const digits = [];
    while (number > 0) {
      digits.push(number%10);
      number = Math.floor(number/10);
    } return digits; };

 let getFactorials = (number) => {
    const facts = [1];
    for (let i = 1; i < number; i++) { facts[i] = facts[i-1] * i; }
    return facts;
  };
  const neededDigits = getDigits(limit).length - 1;
  const combinations = getCombinations(neededDigits, []);
  const possibleSquaredDigitsSums = getPossibleSums(limit);
  const facts = getFactorials(neededDigits + 1);
  let endingWith89 = 0;
  for (let i = 0; i < combinations.length; i++) {
    let counts = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
        digits = combinations[i], curSum = 0;
    for (let j = 0; j < digits.length; j++) {
      const curDigit = digits[j];
      curSum += curDigit ** 2;
      counts[curDigit]++;
    } 
      if (possibleSquaredDigitsSums[curSum]) {
      let denom = 1;
      for (let j = 0; j < counts.length; j++) {
        denom *= facts[counts[j]];
      }
      endingWith89 += Math.floor(facts[facts.length-1]/denom);
    } } 
  return endingWith89; 
}
squareDigitChains(100);