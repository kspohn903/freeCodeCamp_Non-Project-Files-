function amicableChains(lim) {
  let getSmallestMember = (chain) => {
    let smallest = chain[0];
    for (let i = 1; i < chain.length; i++) {
      if (smallest > chain[i]) { smallest = chain[i]; } }
    return smallest; 
  };
  let getFactorsSums = (lim) => {
    const factorsSums = new Array(lim+1).fill(1);
    for (let i = 2; i <= lim/ 2; i++) {
      for (let j = 2 * i; j <= lim; j += i) { factorsSums[j] += i; } 
    } return factorsSums; 
  };
  const factorsSums = getFactorsSums(lim), checkedNumbers = new Set();
  let longestChain = 0, smallestMem = 0;
  for (let i = 0; i <= lim; i++) {
    const curChain = [];
    let curNum = i;
    while (!checkedNumbers.has(curNum) && factorsSums[curNum] <= lim) {
      curNum = factorsSums[curNum];
      const chainStart = curChain.indexOf(curNum);
      if (chainStart == -1) {
        curChain.push(curNum);
        continue;
      }
      const chainLength = curChain.length - chainStart;
      if (chainLength > longestChain) {
        longestChain = chainLength;
        smallestMem = getSmallestMember(curChain.slice(chainStart));
      } break; }
    for (let j = 0; j < curChain.length; j++) {
      checkedNumbers.add(curChain[j]);
  } }
  return smallestMem;
}
amicableChains(300);