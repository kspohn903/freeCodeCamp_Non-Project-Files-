function pathSumFourWays(matrix) {
  const MOVES = [[-1,0],[1,0],[0,-1],[0,1]];
  let getAllowedMoves = (r,c) => {
    const moves = [];
    for (let i = 0; i < MOVES.length; i++) {
      const [rChange, cChange] = MOVES[i];
      const nextR = r + rChange, nextC = c + cChange;
      if (isMoveAllowed(nextR, nextC)) { 
        moves.push([nextR,nextC]);
    } }
    return moves;
  };
  let isMoveAllowed = (nextR, nextC) => (nextR < 0 || nextR >= size || nextC < 0 || nextC >= size) ? false: true; 
  const size = matrix.length, resultMatrix = new Array(size)
    .fill().map(() => new Array(size).fill(Infinity));
  const [startR, startC] = new Array(2).fill(size-1);
  const queue = [[startR, startC]];
  resultMatrix[startR][startC] = matrix[startR][startC];
  while (queue.length > 0) {
    const [curR, curC] = queue.shift();
    const allowedMoves = getAllowedMoves(curR, curC);
    for (let i = 0; i < allowedMoves.length; i++) {
      const [nextR, nextC] = allowedMoves[i];
      const bestPath = resultMatrix[nextR][nextC];
      const newPath = resultMatrix[curR][curC] + matrix[nextR][nextC];
      if (newPath < bestPath) {
        resultMatrix[nextR][nextC] = newPath;
        queue.push(allowedMoves[i]);
    } } }
  return resultMatrix[0][0];
}/*Only change code above this line*/

const testMatrix1 = [[131,673,234,103,18],[201,96,342,965,150],
[630,803,746,422,111],[537,699,497,121,956],[805,732,524,37,331] ];

pathSumFourWays(testMatrix1);