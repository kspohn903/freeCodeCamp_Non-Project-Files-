/* Initalize prime number list with seive */
const PRIMES = Array(7654321).fill(false);
(function initPrimes(n) {
  const upper = Math.floor((n-1)/2);
  const isPrime = Array(upper).fill(true);
  const sqrtUpper = Math.floor((Math.sqrt(n)-1)/2);
  for (let i = 0; i <= sqrtUpper; i++) {
    if (isPrime[i]) { /*Mark value in PRIMES array*/
      const prime = 2*i + 3;
      PRIMES[prime] = true;
      /* Mark all multiples of this number as false (not prime) */
      const primeSqaredIndex = 2 * i ** 2 + 6*i + 3;
      for (let j = primeSqaredIndex; j < upper; j += prime) { 
        isPrime[j] = false; 
      }
    }
  }
  for (let i = sqrtUpper + 1; i < upper; i++) {
    if (isPrime[i]) { PRIMES[2*i + 3] = true; }
  }
})(7654321);

let isPandigital = (n) => {
  const numAsStr = n.toString();
  return Array(numAsStr.length).fill(0)
   .every((_, i) => numAsStr.indexOf(i+1) != -1);
};
function pandigitalPrime(n) {
  const upperBound = parseInt(
    Array(n).fill(0).map((_, i) => n - i).join("") );
  for (let i = upperBound; i > 0; i -= 2) {
    if (PRIMES[i] && isPandigital(i)) { return i; }
  }
}
console.log(`Cases [1,2]: n = [4,7]`);
console.log(`Case 1: ${pandigitalPrime(4)}\nCase 2: ${pandigitalPrime(7)}`);