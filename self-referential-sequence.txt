function selfReferential(n) {
  let descending, i, incr, j, max_i, max_len, 
  max_seq, seq, sequence, indexOf = [].indexOf ||
      function(item) {
        for (let i = 0, l = this.length; i < l; i++) {
          if (i in this && this[i] == item) {return i;}
         } return -1; };

   sequence = (n) => {
    let c, cnt, cnts, d, digit, i, j, l, len, 
        new_cnts, ref, s, seq;
    cnts = {};
    ref = n.toString();
    for (j = 0, len = ref.length; j < len; j++) {
      c = ref[j];
      d = parseInt(c);
      incr(cnts, d);
    } seq = [ref];
    while (true) {
      s = '';
      for (i = l = 9; l >= 0; i = --l) {
        if (cnts[i]) { s += `${cnts[i]}${i}`; }
      }
      if (indexOf.call(seq, s) >= 0) { break; }
      seq.push(s);
      new_cnts = {};
      for (digit in cnts) {
        cnt = cnts[digit];
        incr(new_cnts, cnt);
        incr(new_cnts, digit);
      } cnts = new_cnts; } 
      return seq; 
};
  incr = (h, k) => {
    if (h[k] == null) { h[k] = 0; }
    return (h[k] += 1);
  };
  descending = (n) => {
    let tens;
    if (n < 10) { return true; }
    tens = n / 10;
    if (n % 10 > tens % 10) { return false; }
    return descending(tens);
  };
  return sequence(n);
}