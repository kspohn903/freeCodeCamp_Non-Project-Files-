function SHA1(input) {
  let hexcase = 0, chrsz = 8, 
      b64pad = '';
  let hex_sha1 = (s) => binb2hex(core_sha1(str2binb(s), 
  s.length*chrsz));
  
  function core_sha1(x, len) {
    x[len >> 5] |= 0x80 << (24 - (len % 32));
    x[(((len + 64) >> 9) << 4) + 15] = len;
    let w = Array(80);
    let a = 1732584193, b = -271733879, c = -1732584194,
        d = 271733878, e = -1009589776;
    for (let i = 0; i < x.length; i += 16) {
      let olda = a, oldb = b, oldc = c, oldd = d, olde = e;
      for (let j = 0; j < 80; j++) {
        w[j] = (j < 16) ? (x[i+j]): (rol(w[j-3] ^ w[j-8] ^ w[j-14] ^ w[j-16],1));
        
        let t = safe_add(
          safe_add(rol(a,5), sha1_ft(j,b,c,d)),
          safe_add(safe_add(e,w[j]), sha1_kt(j)) );
        e = d;
        d = c;
        c = rol(b, 30);
        b = a;
        a = t;
      }
      a = safe_add(a, olda);
      b = safe_add(b, oldb);
      c = safe_add(c, oldc);
      d = safe_add(d, oldd);
      e = safe_add(e, olde);
    }
    return Array(a, b, c, d, e);
  }
  let sha1_ft = (t,b,c,d) => (t<20)? ((b & c) | (~b & d)): (t<40) ? (b ^ c ^ d): (t<60)? ((b & c) | (b & d) | (c & d)): (b ^ c ^ d);
    
  let sha1_kt = (t) => (t < 20) ? 1518500249: 
  (t < 40) ? 1859775393: (t < 60) ? -1894007588: -899497514;
  
  let safe_add = (x,y) => {
    let lsw = (x & 0xffff) + (y & 0xffff);
    let msw = (x >> 16) + (y >> 16) + (lsw >> 16);
    return (msw << 16) | (lsw & 0xffff);
  };

  let rol = (num, cnt) => {
    return (num << cnt) | (num >>> (32 - cnt));
  };

  function str2binb(str) {
    let bin = Array();
    let mask = (1 << chrsz) - 1;
    for (let i = 0; i < str.length * chrsz; i += chrsz)
      bin[i >> 5] |= (str.charCodeAt(i/chrsz) & mask) << (24-(i%32));
    return bin;
  }

  let binb2hex = (binarray) => {
    let hex_tab = hexcase ? '0123456789ABCDEF' : '0123456789abcdef';
    let str = '';
    for (let i = 0; i < binarray.length * 4; i++) {
      str += hex_tab.charAt((binarray[i >> 2] >> ((3-(i%4))*8 + 4)) & 0xf) + hex_tab.charAt((binarray[i >> 2] >> ((3-(i%4))*8)) & 0xf);
    }
    return str;
  };
  return hex_sha1(input);
}