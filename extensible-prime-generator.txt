function primeGenerator(num, showPrimes) {
  let i, arr = [];
  let isPrime = (n) => { /*try primes <= 16*/
    if (n <= 16) { return (n == 2 || n == 3 || 
    n == 5 || n == 7 || n == 11 || n == 13); /*cull multiples of 2, 3, 5 or 7*/
    } if (n % 2 == 0 || n % 3 == 0 || n % 5 == 0 || 
          n % 7 == 0) { return false; } 
    /*cull square numbers ending in 1, 3, 7 or 9*/
    for (let i = 10; i * i <= n; i += 10) {
      if (n % (i+1) == 0) { return false; }
      if (n % (i+3) == 0) { return false; }
      if (n % (i+7) == 0) { return false; }
      if (n % (i+9) == 0) { return false; }
    } return true; };

  if (typeof num == "number") {
    for (i = 0; arr.length < num; i++) { 
      if (isPrime(i)) { arr.push(i); } 
    } /*first x primes*/
    return (showPrimes) ? arr : arr.pop(); /*xth prime*/
  }
  if (Array.isArray(num)) {/*number of primes between [x,y]*/
    for (i = num[0]; i <= num[1]; i++) { /*primes between [x,y]*/
      if (isPrime(i)) { arr.push(i); } 
    } return (showPrimes) ? arr : arr.length;  
  }/* throw a default error if nothing returned yet (surrogate for a   quite long and detailed try-catch-block anywhere before)*/
  throw("Invalid arguments for primeGenerator()");
}