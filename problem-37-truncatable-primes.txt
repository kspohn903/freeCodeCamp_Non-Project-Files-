const PRIMES = [false, false, true];
let isPrime = (n) => {
  if (PRIMES[n] != undefined) { return PRIMES[n]; }
  if (n % 2 == 0) { return false; }
  const upperBound = Math.sqrt(n);
  for (let i = 3; i <= upperBound; i += 2) {
    if (n % i == 0) { return (PRIMES[n] = false); }
  }
  return (PRIMES[n] = true);
};

/* We can skip numbers with 4, 6, 8, or 0 */
let hasEvenDigit = (n) => n.toString().split('').some(digit => digit % 2 == 0 && digit != '2');

/*Test if every truncated version is prime */
let isTruncatable = (n) => {
  if (!isPrime(n)) { return false; }
  for (let i = 10; i < n; i *= 10) {
    if (!isPrime(n % i)) { return false; }
    if (!isPrime(Math.floor(n/i))) { return false; }
  }
  return true;
};
/*Find first n truncatable primes*/
function truncatablePrimes(n) {
  let numTruncatablePrimes = 0, currentNum = 11, sum = 0;
  while (numTruncatablePrimes < n) {
    if (isTruncatable(currentNum)) {
      sum += currentNum;
      numTruncatablePrimes++;
    }
    currentNum += 2;
    while (hasEvenDigit(currentNum)) { currentNum += 2; }
  }
  return sum;
}

truncatablePrimes(11);