function determinant(matrix) {
  const n = matrix.length;
  switch (n) {
  case 1:
      return matrix[0][0];
  case 2:
      return matrix[0][0]*matrix[1][1]-matrix[0][1]*matrix[1][0];
  case 3:
  const a00 = matrix[1][1]*matrix[2][2] - matrix[1][2]*matrix[2][1];
  const a01 = matrix[1][0]*matrix[2][2] - matrix[1][2]*matrix[2][0];
  const a02 = matrix[1][0]*matrix[2][1] - matrix[1][1]*matrix[2][0];
  return a00*matrix[0][0] - a01*matrix[0][1] + a02*matrix[0][2];
  default: /*Else, Memoize it...*/
      let det = 0;
      for (let i = 0; i < n; i++) {
      const reducedMatrix = matrix.reduce((acc, row, j) => {
        if (i !== j) {
           const [_, ...rowCopy] = row;
           acc.push(rowCopy);
        } return acc; }, [] );
      det += matrix[i][0]*determinant(reducedMatrix)*(i%2==0 ? 1:-1);
      } return det; 
} /*End det function*/}
function cramersRule(matrix, freeTerms){ /* Switch to col.majr format */
  const n = matrix.length;
  const matrixA = matrix.reduce((acc, row) => {
  row.forEach((elem, i) => acc[i].push(elem));
  return acc; }, Array(n).fill().map(_ => []) ); /*Calc.orig.det.*/
  const detA = determinant(matrixA); /*Calc.each soln.val.*/
  const solution = [];
  for (let i = 0; i < n; i++) {
    const matrixAi = matrixA.map((row, j) => 
    (j == i) ? freeTerms : row);
     const detAi = determinant(matrixAi);
    solution.push(detAi / detA);
  } return solution; }
