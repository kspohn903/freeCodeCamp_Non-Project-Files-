function LinkedList() {
  let length = 0, head = null;
  let Node = function(element){ 
    this.element = element;
    this.next = null;
  };
  this.size = () => length;
  this.head = () => head;
  this.add = function(element){
    let node = new Node(element);
    if(head == null) { 
       head = node; 
    } else {
      let currentNode = head;
      while(currentNode.next) { 
            currentNode = currentNode.next; 
      }
      currentNode.next = node;
    } 
    length++; 
  };
  
  this.remove = function(element){
    let currentNode = head, previousNode;
    if(currentNode.element == element) { 
       head = currentNode.next; 
    } else {
      while(currentNode.element != element) {
        previousNode = currentNode;
        currentNode = currentNode.next;
      }  
      previousNode.next = currentNode.next; 
    } 
    length --;
  };
  
  this.isEmpty = () => (this.size() > 0) ? false : true;
  this.indexOf = (el) => {
    let currentNode = head, index = -1, indexFound = false;
    while (!indexFound && currentNode) {
      index++;
      if(currentNode.element == el) { indexFound = true; }
      currentNode = currentNode.next;
    } 
    return indexFound ? index : -1;
  };
  
  this.elementAt = function(i) {
    let currentNode = head, currentElement, 
        index = -1, indexReached = false;
    while (!indexReached && currentNode) {
      index++;
      currentElement = currentNode.element;
      if(index == i) { indexReached = true; }
      currentNode = currentNode.next;
    } 
    return indexReached ? currentElement : undefined; 
  };
}