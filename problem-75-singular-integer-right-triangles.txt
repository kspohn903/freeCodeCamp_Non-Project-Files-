function singularIntRightTriangles(limit) {
let euclidFormula = (m,n) => [m ** 2 - n ** 2, 2*m*n, m ** 2 + n ** 2]; 
  let gcd = (nA, nB) => (nB == 0) ? nA: gcd(nB, nA%nB);  
  let notBothOdd = (nA,nB) => (nA+nB) % 2 == 1;
  let areCoprime = (nA,nB) => gcd(nA, nB) == 1;
  const trianglesWithPerimeter = new Array(limit + 1).fill(0);
  const mLimit = Math.sqrt(limit/2);

  for (let m = 2; m < mLimit; m++) {
    for (let n = 1; n < m; n++) {
      if (notBothOdd(m,n) && areCoprime(m,n)) {
        const [sideA, sideB, sideC] = euclidFormula(m,n);
        const perimeter = sideA + sideB + sideC;
        let curPerimeter = perimeter;
        while (curPerimeter <= limit) {
          trianglesWithPerimeter[curPerimeter]++;
          curPerimeter += perimeter;
  } } } }
  return trianglesWithPerimeter.filter(tCount => tCount == 1).length;
}
singularIntRightTriangles(48);