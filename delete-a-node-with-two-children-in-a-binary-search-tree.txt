let displayTree = tree => console.log(JSON.stringify(tree, null, 2));
function Node(value) {
  this.value = value;
  this.left = null;
  this.right = null;
}
function BinarySearchTree() {
  this.root = null;
  this.remove = function(value) {
    if (this.root == null) { 
        return null; 
    }
    let target, parent = null; /* Find the target value and its parent */
    (function findValue(node = this.root) {
      if (value == node.value) {
        target = node;
      } else if (value < node.value && node.left != null) {
        parent = node;
        return findValue(node.left);
      } else if (value < node.value && node.left == null) {
        return null;
      } else if (value > node.value && node.right != null) {
        parent = node;
        return findValue(node.right);
      } else { 
        return null; 
      }
    }.bind(this)());
    if (target == null) { 
      return null; 
    } 
    /* Count the children of the target to delete */
    let children = ((target.left != null) ? 1 : 0) + 
                   ((target.right != null) ? 1 : 0);
    if (children == 0) { /* Case 1: Target has no children */
      if (target == this.root) {
        this.root = null;
      } else {
        if (parent.left == target) { 
            parent.left = null; 
        } else { 
            parent.right = null; 
        }
      } 
     } else if (children == 1) { /* Case 2: Target has one child */
      let newChild = (target.left != null) ? target.left : target.right;
      if (parent == null) {
        target.value = newChild.value;
        target.left = null;
        target.right = null;
      } else if (newChild.value < parent.value) {
        parent.left = newChild;
      } else { 
        parent.right = newChild; 
      }
      target = null;
    /* Case 3: Target has two children.\n "Only change code below this line".*/
    } else if (children == 2) { 
      /* Find the smallest value from the right side */
      const newChildValue = this.findMin(target.right);
      this.remove(newChildValue); /* Recursively remove the node with this value */
      target.value = newChildValue;/* Set the target value to the new child value */
    }
  };
  /* Find the minimum and maximum values from a tree or subtree */
  this.findMin = (root = this.root) => {
    if (!this.root) { 
        return null; 
    }
    return (root.left) ? this.findMin(root.left) : root.value;
  };
  this.findMax = (root = this.root) => {
    if (!this.root) { 
        return null; 
    }
    return (root.right) ? this.findMax(root.right) : root.value;
  };
}