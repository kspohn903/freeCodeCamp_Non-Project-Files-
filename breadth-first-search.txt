function bfs(graph, root) {
  let nodesLen = {}; /* Distance object to be returned */
  /* Set all distances to infinity */
  for (let i = 0; i < graph.length; i++) { 
       nodesLen[i] = Infinity; 
  }
  nodesLen[root] = 0; /* ...except root node */
  let queue = [root]; /* Keep track of nodes to visit */
  let current; /* Current node traversing */
  /* Keep on going until no more nodes to traverse */
  while (queue.length !== 0) {
    current = queue.shift();
    /* Get adjacent nodes from current node */
    let curConnected = graph[current], /* Get layer of edges from current */
    neighborIdx = [], /* List of nodes with edges */
    idx = curConnected.indexOf(1); /* Get first edge connection */
    while (idx != -1) {
      neighborIdx.push(idx); /* Add to list of neighbors */
      idx = curConnected.indexOf(1, idx + 1); /* Keep on searching */
    }
    /* Loop through neighbors and get lengths */
    for (let j = 0; j < neighborIdx.length; j++) {
      /* Increment distance for nodes traversed */
      if (nodesLen[neighborIdx[j]] == Infinity) {
        nodesLen[neighborIdx[j]] = nodesLen[current] + 1;
        queue.push(neighborIdx[j]); /* Add new neighbors to queue */
      } 
     } 
    }
    return nodesLen;
};
let exBFSGraph = [
  [0, 1, 0, 0],
  [1, 0, 1, 0],
  [0, 1, 0, 1],
  [0, 0, 1, 0]
];
console.log(bfs(exBFSGraph, 3));