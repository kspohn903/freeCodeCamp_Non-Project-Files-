let sqrtDigitalExpansion = (n) => {
  let sumDigits = (number) => {
    let sum = 0;
    while (number > 0n) {
      let digit = number % 10n;
      sum += parseInt(digit, 10);
      number /= 10n;
    } return sum; };
  let power = (nA,nB) => {
    let result = 1n;
    for (let b = 0; b < nB; b++) {
      result *= BigInt(nA);
    } return result; };
/*Based on 
  http://www.afjarvis.staff.shef.ac.uk/maths/jarvisspec02.pdf */
let expandSquareRoot = (number, numDigits) => {
    let a = 5n * BigInt(number), b = 5n;
    const boundaryWithNeededDigits = power(10, numDigits + 1);
    while (b < boundaryWithNeededDigits) {
      if (a >= b) {
        a -= b;
        b += 10n;
      } else {
        a *= 100n;
        b = (b/10n)*100n + 5n;
      } } 
      return b / 100n; 
  };
  let result = 0, nextPerfectRoot = 1;
  const requiredDigits = 100;
  for (let i = 1; i <= n; i++) {
    if (nextPerfectRoot ** 2 == i) {
      nextPerfectRoot++;
      continue;
    } result += sumDigits(expandSquareRoot(i, requiredDigits)); }
  return result;
};
sqrtDigitalExpansion(2);